const { SupabaseInstance, SupabaseContact, SupabaseChat, SupabaseMessage, SupabaseUser } = require('../models/supabase')
// Use SupabaseInstance as Instance for compatibility
const Instance = SupabaseInstance
const evolutionApi = require('../services/evolutionApi')
const ngrokService = require('../services/ngrok')
const redisService = require('../config/redis')
const { emitSyncProgress, emitSyncStart, emitSyncComplete } = require('../services/socket')
const { v4: uuidv4 } = require('uuid')

class InstanceController {
  // Criar nova inst√¢ncia
  async createInstance(req, res) {
    try {
      const { name } = req.body

      if (!name) {
        return res
          .status(400)
          .json({ error: 'Nome da inst√¢ncia √© obrigat√≥rio' })
      }

      // Verificar se j√° existe uma inst√¢ncia com esse nome
      const existingInstance = await SupabaseInstance.findByName(name)
      if (existingInstance) {
        return res
          .status(400)
          .json({ error: 'J√° existe uma inst√¢ncia com esse nome' })
      }

      // Criar inst√¢ncia no Evolution API
      // Normalizar nome: sem espa√ßos, sem mai√∫sculas, adicionar UUID e timestamp
      const { v4: uuidv4 } = require('uuid')
      const normalizedName = name.toLowerCase().replace(/\s+/g, '_')
      const evolutionInstanceId = `${normalizedName}_${uuidv4().substring(0, 8)}_${Date.now()}`
      // Determinar URL do webhook baseado no ambiente
      let webhookBaseUrl = process.env.WEBHOOK_URL;
      
      // Em desenvolvimento, sempre usar ngrok se n√£o h√° URL p√∫blica configurada
      if (process.env.NODE_ENV === 'development' && !webhookBaseUrl) {
        if (!ngrokService.isActive()) {
          console.log('üöá Iniciando t√∫nel ngrok para webhook...');
          await ngrokService.startTunnel(3001);
        }
        webhookBaseUrl = ngrokService.getWebhookUrl();
      }
      
      const webhookUrl = webhookBaseUrl ? `${webhookBaseUrl}/${evolutionInstanceId}` : null;

      console.log('üîó Usando webhook URL:', webhookUrl);

      const evolutionResponse = await evolutionApi.createInstance(
        evolutionInstanceId,
        webhookUrl
      )

      // Tentar conectar automaticamente ap√≥s criar e configurar webhook
      try {
        await evolutionApi.connectInstance(evolutionInstanceId)
      } catch (connectErr) {
        console.warn('N√£o foi poss√≠vel conectar imediatamente a inst√¢ncia (tentar√° depois):', connectErr.response?.data || connectErr.message)
      }

      // Salvar no banco de dados
      const instance = await SupabaseInstance.create({
        name,
        evolution_instance_id: evolutionInstanceId,
        webhook_url: webhookUrl,
        user_id: req.user.id,
        status: 'connecting'
      })

      res.status(201).json({
        instance: {
          id: instance.id,
          name: instance.name,
          status: instance.status,
          evolutionInstanceId: instance.evolution_instance_id
        },
        evolutionResponse
      })
    } catch (error) {
      console.error('Erro ao criar inst√¢ncia:', error)
      const msg = error?.response?.data || error?.message || 'Erro interno do servidor'
      res.status(500).json({ error: msg })
    }
  }

  // Listar inst√¢ncias do usu√°rio
  async getInstances(req, res) {
    try {
      console.log('üîç Listando inst√¢ncias - User:', req.user ? 'Presente' : 'N√£o encontrado')
      console.log('üîç User role:', req.user?.role)
      
      // Se n√£o houver usu√°rio, retornar erro
      if (!req.user) {
        return res.status(401).json({ error: 'Usu√°rio n√£o autenticado' })
      }

      // Buscar inst√¢ncias do usu√°rio (ou todas se admin)
      let instances
      instances = await SupabaseInstance.findByUserId(req.user.id)

      console.log(`üîç Encontradas ${instances ? instances.length : 0} inst√¢ncias`)

      // Converter para o formato esperado pelo frontend
      const formattedInstances = instances.map(instance => ({
        id: instance.id,
        name: instance.name,
        evolutionInstanceId: instance.evolution_instance_id,
        status: instance.status || 'disconnected',
        qrCode: instance.qr_code,
        phone: instance.phone,
        profileName: instance.profile_name,
        webhookUrl: instance.webhook_url,
        createdAt: instance.created_at,
        updatedAt: instance.updated_at
      }))

      console.log('‚úÖ Retornando inst√¢ncias:', formattedInstances.length)
      res.json({ instances: formattedInstances })
    } catch (error) {
      console.error('Erro ao listar inst√¢ncias:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Obter detalhes de uma inst√¢ncia
  async getInstance(req, res) {
    try {
      const { id } = req.params

      const whereClause = { id }
      if (req.user.role !== 'admin') {
        whereClause.userId = req.user.id
      }

      const instance = await SupabaseInstance.findOne({
        where: whereClause,
        include: [
          {
            model: require('../models').User,
            attributes: ['name', 'email']
          }
        ]
      })

      if (!instance) {
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      // Obter status atual do Evolution API
      try {
        const provider = await evolutionApi.getInstanceStatus(
          instance.evolution_instance_id
        )

        const evolutionState = provider?.instance?.state
        let mapped = 'disconnected'
        
        // Usar mesma l√≥gica de mapeamento da getConnectionState para consist√™ncia
        if (evolutionState === 'open') {
          try {
            const pairInfo = await evolutionApi.getQRCode(instance.evolution_instance_id)
            const hasPairing = !!(pairInfo?.pairingCode || pairInfo?.code)
            
            if (hasPairing) {
              mapped = 'connecting'
            } else {
              mapped = 'connected'
              
              // Tentar obter informa√ß√µes da inst√¢ncia se ainda n√£o temos
              if (!instance.phone) {
                try {
                  const instanceInfo = await evolutionApi.getInstanceInfo(instance.evolution_instance_id)
                  if (instanceInfo?.owner) {
                    const phone = instanceInfo.owner.replace('@s.whatsapp.net', '')
                    await SupabaseInstance.update(instance.id, { phone })
                  }
                } catch (_) {
                  // Ignorar erro ao obter info da inst√¢ncia
                }
              }
            }
          } catch (_) {
            // Se falhar ao obter pairing info mas estado √© open, consideramos conectado
            mapped = 'connected'
          }
        } else if (
          evolutionState === 'connecting' ||
          evolutionState === 'qr' ||
          evolutionState === 'OPENING' ||
          evolutionState === 'PAIRING'
        ) {
          mapped = 'connecting'
        } else if (evolutionState === 'close' || evolutionState === 'CLOSED') {
          mapped = 'disconnected'
        } else {
          mapped = 'disconnected'
        }

        await SupabaseInstance.update(instance.id, {
          status: mapped,
          lastSeen: new Date()
        })
      } catch (evolutionError) {
        console.error(
          'Erro ao obter status da inst√¢ncia no Evolution:',
          evolutionError.message
        )
      }

      res.json({ instance })
    } catch (error) {
      console.error('Erro ao obter inst√¢ncia:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Conectar inst√¢ncia
  async connectInstance(req, res) {
    try {
      const { id } = req.params

      const whereClause = { id }
      if (req.user.role !== 'admin') {
        whereClause.userId = req.user.id
      }

      const instance = await SupabaseInstance.findOne({ where: whereClause })
      if (!instance) {
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      // Conectar no Evolution API
      const evolutionResponse = await evolutionApi.connectInstance(
        instance.evolution_instance_id
      )

      await SupabaseInstance.update(instance.id, {
        status: 'connecting',
        lastSeen: new Date()
      })

      res.json({
        message: 'Comando de conex√£o enviado',
        evolutionResponse
      })
    } catch (error) {
      console.error('Erro ao conectar inst√¢ncia:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Obter QR Code
  async getQRCode(req, res) {
    try {
      const { id } = req.params
      console.log(`üîç Solicita√ß√£o de QR Code para inst√¢ncia: ${id}`)

      const whereClause = { id }
      if (req.user.role !== 'admin') {
        whereClause.userId = req.user.id
      }

      const instance = await SupabaseInstance.findOne({ where: whereClause })
      if (!instance) {
        console.log(`‚ùå Inst√¢ncia n√£o encontrada: ${id}`)
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      console.log(`üì± Inst√¢ncia encontrada: ${instance.evolution_instance_id}, Status: ${instance.status}`)
      const data = await evolutionApi.getQRCode(instance.evolution_instance_id)

        // Evolution connect pode retornar { pairingCode, code, count }
        const normalized = {
          pairingCode: data?.pairingCode || null,
          code: data?.code || null,
          count: data?.count || null
        }

        // Se vier um base64 (alguns servidores), persistimos; caso contr√°rio, s√≥ repassamos dados de pareamento
        const base64 = data?.base64 || data?.qrcode || data?.qrCode || null
        if (base64) {
          await SupabaseInstance.update(instance.id, { qr_code: base64 })
        }

        res.json({ qrCode: base64, ...normalized })
    } catch (error) {
        const provider = error.response?.data
        if (provider) {
          console.error('Erro ao obter QR/Pairing (provider):', provider)
          return res.status(502).json({ error: 'Erro ao obter QR do provedor', provider })
        }
        console.error('Erro ao obter QR Code:', error)
        res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Obter estado da conex√£o
  async getConnectionState(req, res) {
    try {
      const { id } = req.params
      // console.log(`üì° Verificando status da inst√¢ncia: ${id}`)

      const whereClause = { id }
      if (req.user.role !== 'admin') {
        whereClause.userId = req.user.id
      }
 
      const instance = await SupabaseInstance.findOne({ where: whereClause })
      if (!instance) {
        // console.log(`‚ùå Inst√¢ncia n√£o encontrada: ${id}`)
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      console.log(`üîç Consultando Evolution API para: ${instance.evolution_instance_id}`)
      
      let data
      try {
        data = await evolutionApi.getInstanceStatus(instance.evolution_instance_id)
        console.log('üìã Resposta do Evolution API:', JSON.stringify(data, null, 2))
      } catch (error) {
        // Se inst√¢ncia n√£o existe no provider (404), marcar como √≥rf√£
        if (error.response?.status === 404) {
          console.warn(`üßπ Inst√¢ncia ${instance.evolution_instance_id} n√£o existe no provider. Marcando como √≥rf√£.`)
          await SupabaseInstance.update(instance.id, { 
            status: 'error',
            settings: { 
              ...instance.settings, 
              orphaned: true,
              orphanedAt: new Date().toISOString(),
              orphanError: 'Instance not found in provider'
            }
          })
          return res.json({ 
            status: 'error', 
            orphaned: true,
            message: 'Inst√¢ncia n√£o encontrada no provider. Use "Recriar" para gerar uma nova inst√¢ncia.',
            instanceName: data?.instance?.instanceName,
            state: 'not_found'
          })
        }
        throw error
      }

      // Mapear estado Evolution para nosso padr√£o
      let status = 'disconnected'
      const evolutionState = data?.instance?.state
      const ownerJid = data?.instance?.owner

      console.log(`üîÑ Estado recebido da Evolution: "${evolutionState}" | ownerJid: ${ownerJid || 'n/a'} | phone: ${instance.phone || 'n/a'}`)

      // Atualizar phone se n√£o temos no banco mas temos owner na Evolution
      if (!instance.phone && ownerJid) {
        const phoneNumber = ownerJid.replace('@s.whatsapp.net', '')
        await SupabaseInstance.update(instance.id, { phone: phoneNumber })
      }

      // Mapeamento mais flex√≠vel e direto baseado no estado da Evolution API
      if (evolutionState === 'open') {
        // Se o estado √© 'open', consideramos conectado
        // Vamos verificar apenas se n√£o h√° pairingCode ativo (indicaria que ainda est√° pareando)
        try {
          const pairInfo = await evolutionApi.getQRCode(instance.evolution_instance_id)
          const hasPairing = !!(pairInfo?.pairingCode || pairInfo?.code)
          
          if (hasPairing) {
            console.log('üîÑ Estado open mas ainda tem pairingCode ativo, mantendo connecting')
            status = 'connecting'
          } else {
            console.log('‚úÖ Estado open e sem pairingCode, definindo como connected')
            status = 'connected'
            
            // Tentar obter informa√ß√µes da inst√¢ncia se ainda n√£o temos o n√∫mero
            if (!instance.phone && !ownerJid) {
              try {
                const instanceInfo = await evolutionApi.getInstanceInfo(instance.evolution_instance_id)
                if (instanceInfo?.owner) {
                  const phone = instanceInfo.owner.replace('@s.whatsapp.net', '')
                  await SupabaseInstance.update(instance.id, { phone })
                  console.log('üì± N√∫mero da inst√¢ncia atualizado:', phone)
                }
              } catch (infoErr) {
                console.warn('N√£o foi poss√≠vel obter info da inst√¢ncia:', infoErr.message)
              }
            }
          }
        } catch (pairErr) {
          // Se falhar ao obter pairing info, mas estado √© open, consideramos conectado
          console.log('‚úÖ Estado open (erro ao verificar pairing, assumindo conectado)')
          status = 'connected'
        }
      } else if (evolutionState === 'connecting' || evolutionState === 'qr' || evolutionState === 'OPENING' || evolutionState === 'PAIRING') {
        status = 'connecting'
      } else if (evolutionState === 'close' || evolutionState === 'CLOSED') {
        status = 'disconnected'
      } else {
        // Estados desconhecidos ou null - marcar como desconectado
        console.warn(`‚ö†Ô∏è Estado desconhecido da Evolution: "${evolutionState}"`)
        status = 'disconnected'
      }

      console.log(`üéØ Status mapeado (com valida√ß√£o de n√∫mero): "${status}"`)

      // Limpar flag de √≥rf√£ se inst√¢ncia voltou a existir
      if (instance.settings?.orphaned) {
        await SupabaseInstance.update(instance.id, { 
          status,
          settings: { 
            ...instance.settings, 
            orphaned: false,
            orphanedAt: null,
            orphanError: null
          }
        })
      } else if (instance.status !== status) {
        //console.log(`üîÑ Atualizando status no BD: ${instance.status} ‚Üí ${status}`)
        await SupabaseInstance.update(instance.id, { status })
      }

      const response = { 
        status,
        instanceName: data?.instance?.instanceName,
        state: data?.instance?.state 
      }
      
      //console.log('‚úÖ Status verificado com sucesso:', response)
      res.json(response)
    } catch (error) {
      const provider = error.response?.data
      if (provider) {
        console.error('Erro ao obter status (provider):', provider)
        return res.status(502).json({ error: 'Erro ao obter status do provedor', provider })
      }
      console.error('Erro ao obter status da inst√¢ncia:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Desconectar inst√¢ncia
  async disconnectInstance(req, res) {
    try {
      const { id } = req.params

      const whereClause = { id }
      if (req.user.role !== 'admin') {
        whereClause.userId = req.user.id
      }

      const instance = await SupabaseInstance.findOne({ where: whereClause })
      if (!instance) {
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      // Verificar se a inst√¢ncia existe no Evolution API antes de tentar desconectar
      try {
        await evolutionApi.getInstanceInfo(instance.evolution_instance_id)
        // Se chegou aqui, a inst√¢ncia existe, pode fazer logout
        await evolutionApi.logoutInstance(instance.evolution_instance_id)
      } catch (evolutionError) {
        // Se a inst√¢ncia n√£o existe (404), apenas atualizar o banco local
        if (evolutionError.response?.status === 404) {
          console.log(`Inst√¢ncia ${instance.evolution_instance_id} n√£o existe na Evolution API, apenas atualizando banco local`)
        } else {
          console.error('Erro ao verificar/desconectar na Evolution API:', evolutionError.response?.data || evolutionError.message)
        }
      }

      await SupabaseInstance.update(instance.id, {
        status: 'disconnected',
        phone: null,
        qrCode: null
      })

      res.json({ message: 'Inst√¢ncia desconectada com sucesso' })
    } catch (error) {
      console.error('Erro ao desconectar inst√¢ncia:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Deletar inst√¢ncia
  async deleteInstance(req, res) {
    try {
      const { id } = req.params

      const whereClause = { id }
      if (req.user.role !== 'admin') {
        whereClause.userId = req.user.id
      }

      const instance = await SupabaseInstance.findOne({ where: whereClause })
      if (!instance) {
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      // Deletar no Evolution API (se existir)
      try {
        await evolutionApi.getInstanceInfo(instance.evolution_instance_id)
        // Se chegou aqui, a inst√¢ncia existe, pode deletar
        await evolutionApi.deleteInstance(instance.evolution_instance_id)
        console.log(`Inst√¢ncia ${instance.evolution_instance_id} deletada da Evolution API`)
      } catch (evolutionError) {
        // Se a inst√¢ncia n√£o existe (404), apenas deletar do banco local
        if (evolutionError.response?.status === 404) {
          console.log(`Inst√¢ncia ${instance.evolution_instance_id} n√£o existe na Evolution API, apenas deletando do banco local`)
        } else {
          console.error('Erro ao verificar/deletar na Evolution API:', evolutionError.response?.data || evolutionError.message)
        }
      }

      // Deletar inst√¢ncia - CASCADE DELETE will handle related records automatically
      await SupabaseInstance.delete(instance.id)

      res.json({ message: 'Inst√¢ncia deletada com sucesso' })
    } catch (error) {
      console.error('Erro ao deletar inst√¢ncia:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Obter informa√ß√µes do perfil
  async getProfileInfo(req, res) {
    try {
      const { id } = req.params

      const whereClause = { id }
      if (req.user.role !== 'admin') {
        whereClause.userId = req.user.id
      }

      const instance = await SupabaseInstance.findOne({ where: whereClause })
      if (!instance) {
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      // Verificar se a inst√¢ncia est√° conectada
      if (instance.status !== 'connected') {
        return res.status(400).json({
          error: 'Inst√¢ncia n√£o est√° conectada. Conecte a inst√¢ncia primeiro.'
        })
      }

      // Buscar informa√ß√µes da inst√¢ncia na Evolution API para obter o ownerJid
      let phoneNumber = instance.phone
      try {
        const evolutionInfo = await evolutionApi.getInstanceInfo(instance.evolution_instance_id)
        if (evolutionInfo?.owner) {
          phoneNumber = evolutionInfo.owner
          // Atualizar phone no banco se n√£o temos
          if (!instance.phone) {
            await SupabaseInstance.update(instance.id, { phone: evolutionInfo.owner.replace('@s.whatsapp.net', '') })
          }
        }
      } catch (evolutionError) {
        console.log('‚ö†Ô∏è Erro ao buscar info da Evolution API:', evolutionError.message)
        // Se n√£o conseguiu buscar da API, verificar se temos phone no banco
        if (!instance.phone) {
          return res.status(400).json({
            error: 'N√∫mero da inst√¢ncia ainda n√£o dispon√≠vel. Reconecte a inst√¢ncia.'
          })
        }
        phoneNumber = instance.phone.includes('@') ? instance.phone : `${instance.phone}@s.whatsapp.net`
      }

      if (!phoneNumber) {
        return res.status(400).json({
          error: 'N√∫mero da inst√¢ncia ainda n√£o dispon√≠vel. Conclua a conex√£o (escaneie o QR) e tente novamente.'
        })
      }

      // Primeiro buscar dados da inst√¢ncia via fetchInstances (tem informa√ß√µes mais completas)
      let instanceProfileData = null
      let profileInfo = null
      
      try {
        console.log('üîç Buscando dados da inst√¢ncia via fetchInstances...')
        instanceProfileData = await evolutionApi.getInstanceInfo(instance.evolution_instance_id)
        
        // Se fetchInstances n√£o tem profileName ou profilePictureUrl, buscar via fetchProfile
        if (!instanceProfileData?.profileName || !instanceProfileData?.profilePictureUrl) {
          console.log('üì± Buscando dados adicionais via fetchProfile...')
          profileInfo = await evolutionApi.getContactProfile(
            instance.evolution_instance_id,
            phoneNumber
          )
        }
      } catch (e) {
        console.log('‚ö†Ô∏è Erro ao buscar dados da Evolution API:', e.message)
        // Se falhou fetchInstances, tentar fetchProfile
        try {
          profileInfo = await evolutionApi.getContactProfile(
            instance.evolution_instance_id,
            phoneNumber
          )
        } catch (profileError) {
          console.log('‚ùå Tamb√©m falhou fetchProfile:', profileError.message)
        }
      }

      // Atualizar profile_pic_url se obtivemos nova informa√ß√£o
      const newProfilePic = instanceProfileData?.profilePictureUrl || profileInfo?.profilePictureUrl || profileInfo?.picture
      if (newProfilePic && newProfilePic !== instance.profile_pic_url) {
        await SupabaseInstance.update(instance.id, { profile_pic_url: newProfilePic })
      }

      // Normalizar payload b√°sico esperado pelo frontend
      // Priorizar dados da fetchInstances quando dispon√≠veis
      const normalized = {
        name: profileInfo?.name || profileInfo?.pushName || instanceProfileData?.profileName || 'Usu√°rio',
        number: profileInfo?.number || (instanceProfileData?.owner ? instanceProfileData.owner.replace('@s.whatsapp.net', '') : instance.phone),
        profilePictureUrl: profileInfo?.profilePictureUrl || profileInfo?.profilePicture || instanceProfileData?.profilePictureUrl || instance.profile_pic_url || null,
        status: profileInfo?.status || undefined,
        // Adicionar campos extras da Evolution API
        profileName: instanceProfileData?.profileName || profileInfo?.pushName,
        ownerJid: instanceProfileData?.owner
      }

      res.json(normalized)
    } catch (error) {
      console.error('Erro ao obter informa√ß√µes do perfil:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Sincronizar dados da inst√¢ncia com Evolution API
  async syncInstanceData(req, res) {
    try {
      const { id } = req.params

      const whereClause = { id }
      if (req.user.role !== 'admin') {
        whereClause.userId = req.user.id
      }

      const instance = await SupabaseInstance.findOne({ where: whereClause })
      if (!instance) {
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      try {
        // Buscar informa√ß√µes atualizadas da Evolution API usando fetchInstances
        console.log('üîÑ Sincronizando dados da Evolution API para:', instance.evolution_instance_id)
        const evolutionInfo = await evolutionApi.getInstanceInfo(instance.evolution_instance_id)
        
        if (evolutionInfo) {
          const updateFields = {}
          
          // Atualizar phone se n√£o temos no banco local ou se mudou
          if (evolutionInfo.owner) {
            const newPhone = evolutionInfo.owner.replace('@s.whatsapp.net', '')
            if (!instance.phone || instance.phone !== newPhone) {
              updateFields.phone = newPhone
            }
          }
          
          // Atualizar profile_pic_url se temos nova informa√ß√£o
          if (evolutionInfo.profilePictureUrl && evolutionInfo.profilePictureUrl !== instance.profile_pic_url) {
            updateFields.profile_pic_url = evolutionInfo.profilePictureUrl
          }
          
          // Atualizar status baseado no connectionStatus da Evolution
          if (evolutionInfo.connectionStatus) {
            const newStatus = evolutionInfo.connectionStatus === 'open' ? 'connected' : 
                             evolutionInfo.connectionStatus === 'close' ? 'disconnected' : 'connecting'
            if (instance.status !== newStatus) {
              updateFields.status = newStatus
            }
          }
          
          // Aplicar atualiza√ß√µes se houver
          if (Object.keys(updateFields).length > 0) {
            console.log('üìù Atualizando campos:', updateFields)
            await SupabaseInstance.update(instance.id, updateFields)
          }
          
          // Retornar dados sincronizados enriquecidos com informa√ß√µes da Evolution API
          const instanceData = instance.toJSON()
          instanceData.ownerJid = evolutionInfo.owner
          instanceData.profileName = evolutionInfo.profileName
          instanceData.profilePictureUrl = evolutionInfo.profilePictureUrl
          instanceData.connectionStatus = evolutionInfo.connectionStatus
          instanceData.evolutionCounts = evolutionInfo.counts
          
          res.json({
            message: 'Dados sincronizados com sucesso',
            instance: instanceData
          })
        } else {
          res.json({
            message: 'Nenhum dado dispon√≠vel na Evolution API',
            instance: instance.toJSON()
          })
        }
      } catch (evolutionError) {
        if (evolutionError.response?.status === 404) {
          return res.status(404).json({
            error: 'Inst√¢ncia n√£o encontrada na Evolution API',
            orphaned: true
          })
        }
        throw evolutionError
      }
    } catch (error) {
      console.error('Erro ao sincronizar dados da inst√¢ncia:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Obter contatos da inst√¢ncia
  async getContacts(req, res) {
    try {
      const { id } = req.params

      const whereClause = { id }
      if (req.user.role !== 'admin') {
        whereClause.userId = req.user.id
      }

      const instance = await SupabaseInstance.findOne({ where: whereClause })
      if (!instance) {
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      if (instance.status !== 'connected') {
        return res.status(400).json({ error: 'Inst√¢ncia n√£o est√° conectada' })
      }

      const contacts = await evolutionApi.getContacts(instance.evolution_instance_id)
      res.json({ contacts: contacts || [] })
    } catch (error) {
      console.error('Erro ao obter contatos:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Recriar inst√¢ncia √≥rf√£
  async recreateInstance(req, res) {
    try {
      const { id } = req.params

      const whereClause = { id }
      if (req.user.role !== 'admin') {
        whereClause.userId = req.user.id
      }

      const instance = await SupabaseInstance.findOne({ where: whereClause })
      if (!instance) {
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      console.log(`üîÑ Recriando inst√¢ncia √≥rf√£: ${instance.name}`)

      // Gerar nova evolutionInstanceId
      const normalizedName = instance.name.toLowerCase().replace(/\s+/g, '_')
      const newEvolutionInstanceId = `${normalizedName}_${uuidv4().substring(0, 8)}_${Date.now()}`
      
      // Determinar URL do webhook baseado no ambiente
      let webhookBaseUrl = process.env.WEBHOOK_URL;
      
      // Em desenvolvimento, sempre usar ngrok se n√£o h√° URL p√∫blica configurada
      if (process.env.NODE_ENV === 'development' && !webhookBaseUrl) {
        if (!ngrokService.isActive()) {
          console.log('üöá Iniciando t√∫nel ngrok para webhook...');
          await ngrokService.startTunnel(3001);
        }
        webhookBaseUrl = ngrokService.getWebhookUrl();
      }
      
      const webhookUrl = webhookBaseUrl ? `${webhookBaseUrl}/${newEvolutionInstanceId}` : null;

      // Criar nova inst√¢ncia no Evolution API
      const evolutionResponse = await evolutionApi.createInstance(
        newEvolutionInstanceId,
        webhookUrl
      )

      // Conectar automaticamente
      try {
        await evolutionApi.connectInstance(newEvolutionInstanceId)
      } catch (connectErr) {
        console.warn('N√£o foi poss√≠vel conectar imediatamente:', connectErr.message)
      }

      // Atualizar dados da inst√¢ncia existente
      await SupabaseInstance.update(instance.id, {
        evolutionInstanceId: newEvolutionInstanceId,
        webhookUrl,
        status: 'connecting',
        phone: null,
        qrCode: null,
        profile_pic_url: null,
        settings: {
          ...instance.settings,
          orphaned: false,
          orphanedAt: null,
          orphanError: null,
          recreatedAt: new Date().toISOString()
        },
        lastSeen: new Date()
      })

      res.json({
        message: 'Inst√¢ncia recriada com sucesso',
        instance: {
          id: instance.id,
          name: instance.name,
          evolutionInstanceId: newEvolutionInstanceId,
          status: 'connecting'
        },
        evolutionResponse
      })
    } catch (error) {
      console.error('Erro ao recriar inst√¢ncia:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Verificar e reconfigurar webhook
  async checkWebhook(req, res) {
    try {
      console.log('üîç Verificando webhook...')
      // A rota √© /instances/:id/webhook ‚Äî garantir nome correto do par√¢metro
      const { id: instanceId } = req.params
      console.log('üìã InstanceId (params.id):', instanceId)

      const instance = await Instance.findByPk(instanceId)
      if (!instance) {
        console.log('‚ùå Inst√¢ncia n√£o encontrada')
        return res.status(404).json({ error: 'Inst√¢ncia n√£o encontrada' })
      }

      console.log('‚úÖ Inst√¢ncia encontrada:', instance.name)

      // Verificar webhook atual
      let currentWebhook = null
      try {
        currentWebhook = await evolutionApi.findWebhook(instance.evolution_instance_id)
        console.log('üîç Webhook atual:', JSON.stringify(currentWebhook, null, 2))
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao buscar webhook atual:', error.message)
      }

      // Obter URL do webhook (ngrok ou local)
      const webhookUrl = await getWebhookUrl()
      
      // Verificar se precisa reconfigurar
  const expectedUrl = `${webhookUrl}/${instance.evolution_instance_id}`
  const needsReconfig = !currentWebhook?.enabled || 
           currentWebhook?.url !== expectedUrl ||
                           !currentWebhook?.events?.includes('MESSAGES_UPSERT')

      let reconfigured = false
      if (needsReconfig) {
        try {
          console.log('üîß Reconfigurando webhook...')
          await evolutionApi.setWebhook(
            instance.evolution_instance_id, 
            expectedUrl
          )
          reconfigured = true
          console.log('‚úÖ Webhook reconfigurado com sucesso')
        } catch (error) {
          console.error('‚ùå Erro ao reconfigurar webhook:', error.message)
        }
      }

      res.json({
        instance: {
          id: instance.id,
          name: instance.name,
          evolutionInstanceId: instance.evolution_instance_id
        },
        webhook: {
          current: currentWebhook,
          expected: expectedUrl,
          needsReconfig,
          reconfigured
        }
      })
    } catch (error) {
      console.error('Erro ao verificar webhook:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

  // Cleanup method for orphaned Evolution instances
  async cleanupOrphanedInstances(req, res) {
    try {
      console.log('üßπ Iniciando limpeza de inst√¢ncias √≥rf√£s...')
      
      // Get all instances from Evolution API
      let evolutionInstances = []
      try {
        evolutionInstances = await evolutionApi.getAllInstances()
        console.log(`üìä Encontradas ${evolutionInstances.length} inst√¢ncias na Evolution API`)
      } catch (error) {
        console.log('‚ùå Erro ao conectar com Evolution API:', error.message)
        return res.status(500).json({ error: 'N√£o foi poss√≠vel conectar com Evolution API' })
      }

      // Get all instances from our database
      const dbInstances = await SupabaseInstance.findAll()
      console.log(`üìä Encontradas ${dbInstances.length} inst√¢ncias no banco de dados`)

      // Create map of our database instances
      const dbInstanceMap = new Map()
      dbInstances.forEach(instance => {
        dbInstanceMap.set(instance.evolution_instance_id, instance)
      })

      // Find orphaned instances in Evolution API
      const orphanedInstances = []
      for (const evolutionInstance of evolutionInstances) {
        if (!dbInstanceMap.has(evolutionInstance.instanceName)) {
          orphanedInstances.push(evolutionInstance)
        }
      }

      console.log(`üîç Encontradas ${orphanedInstances.length} inst√¢ncias √≥rf√£s na Evolution API`)

      const results = {
        total_evolution: evolutionInstances.length,
        total_database: dbInstances.length,
        orphaned_found: orphanedInstances.length,
        orphaned_instances: orphanedInstances.map(instance => ({
          name: instance.instanceName,
          state: instance.state,
          connectionStatus: instance.connectionStatus,
          owner: instance.owner
        })),
        cleaned_up: [],
        errors: []
      }

      // If cleanup is requested, delete orphaned instances
      if (req.query.cleanup === 'true') {
        console.log('üóëÔ∏è Iniciando limpeza das inst√¢ncias √≥rf√£s...')
        
        for (const orphanedInstance of orphanedInstances) {
          try {
            console.log(`üóëÔ∏è Deletando inst√¢ncia √≥rf√£: ${orphanedInstance.instanceName}`)
            await evolutionApi.deleteInstance(orphanedInstance.instanceName)
            results.cleaned_up.push(orphanedInstance.instanceName)
            console.log(`‚úÖ Inst√¢ncia ${orphanedInstance.instanceName} deletada com sucesso`)
          } catch (deleteError) {
            console.error(`‚ùå Erro ao deletar inst√¢ncia ${orphanedInstance.instanceName}:`, deleteError.message)
            results.errors.push({
              instance: orphanedInstance.instanceName,
              error: deleteError.message
            })
          }
        }
      }

      res.json({
        success: true,
        message: req.query.cleanup === 'true' ? 'Limpeza conclu√≠da' : 'An√°lise conclu√≠da (use ?cleanup=true para limpar)',
        ...results
      })

    } catch (error) {
      console.error('‚ùå Erro durante limpeza de inst√¢ncias √≥rf√£s:', error)
      res.status(500).json({ error: 'Erro interno do servidor' })
    }
  }

}

// M√©todo helper para obter URL do webhook
async function getWebhookUrl() {
  if (process.env.WEBHOOK_URL) {
    return process.env.WEBHOOK_URL
  }
  console.log('üöß Usando localhost para webhook')
  return process.env.NGROK_DOMAIN || 'http://localhost:3001'
}

module.exports = new InstanceController()

const ngrok = require('ngrok');

class NgrokService {
  constructor() {
    this.url = null;
    this.tunnel = null;
  }

  async startTunnel(port = 3001) {
    try {
      console.log('üöá Iniciando t√∫nel ngrok na porta', port, '...');
      
      // Verificar se j√° existe um t√∫nel ativo
      if (this.url) {
        console.log('‚ö†Ô∏è T√∫nel ngrok j√° existe:', this.url);
        return this.url;
      }

      // Matar qualquer sess√£o ngrok anterior
      try {
        await ngrok.kill();
        console.log('üßπ Sess√µes ngrok anteriores encerradas');
      } catch (killError) {
        // Ignorar erro se n√£o havia sess√£o ativa
      }

      // Configurar ngrok com authtoken se dispon√≠vel
      const authToken = process.env.NGROK_AUTHTOKEN;
      if (authToken) {
        console.log('üîë Configurando authtoken do ngrok...');
        await ngrok.authtoken(authToken);
      } else {
        console.log('‚ö†Ô∏è NGROK_AUTHTOKEN n√£o configurado - usando t√∫nel gratuito');
      }

      // Configura√ß√µes do t√∫nel
      const tunnelConfig = {
        port,
        proto: 'http',
        // Configura√ß√µes para evitar tela de greetings
        bind_tls: true,
        inspect: false,
      };

      // Se h√° um dom√≠nio fixo configurado, usar ele
      const fixedDomain = process.env.NGROK_DOMAIN;
      if (fixedDomain) {
        tunnelConfig.hostname = fixedDomain;
        console.log('üè∑Ô∏è Usando dom√≠nio fixo:', fixedDomain);
      }

      console.log('üîß Configura√ß√£o do t√∫nel:', JSON.stringify(tunnelConfig, null, 2));

      // Criar t√∫nel
      console.log('üì° Conectando ao ngrok...');
      this.url = await ngrok.connect(tunnelConfig);

      // Se usou dom√≠nio fixo, garantir que a URL est√° correta
      if (fixedDomain) {
        this.url = `https://${fixedDomain}`;
      }

      console.log('‚úÖ T√∫nel ngrok criado com sucesso!');
      console.log('üåê URL p√∫blica:', this.url);
      console.log('üîó Webhook base:', `${this.url}/webhook`);
      
      return this.url;
    } catch (error) {
      console.error('‚ùå Erro ao criar t√∫nel ngrok:', error.message);
      console.error('üîç Detalhes do erro:', error);
      this.url = null;
      throw error;
    }
  }

  async stopTunnel() {
    try {
      if (this.url) {
        console.log('üõë Fechando t√∫nel ngrok...');
        await ngrok.kill();
        this.url = null;
        this.tunnel = null;
        console.log('‚úÖ T√∫nel ngrok fechado');
      }
    } catch (error) {
      console.error('‚ùå Erro ao fechar t√∫nel ngrok:', error.message);
    }
  }

  async checkTunnel() {
    if (!this.url) {
      console.log('üîç Ngrok n√£o est√° ativo (sem URL)');
      return false;
    }

    try {
      // Testar se o t√∫nel ainda est√° funcionando
      const axios = require('axios');
      const testUrl = `${this.url}/health`;
      console.log('üîç Testando t√∫nel ngrok:', testUrl);
      
      const response = await axios.get(testUrl, { 
        timeout: 5000,
        headers: {
          'ngrok-skip-browser-warning': 'true'
        }
      });
      
      console.log('‚úÖ T√∫nel ngrok ativo e funcionando');
      return true;
    } catch (error) {
      console.log('‚ùå T√∫nel ngrok offline:', error.message);
      this.url = null;
      return false;
    }
  }

  async restartTunnel(port = 3001) {
    console.log('üîÑ Reiniciando t√∫nel ngrok...');
    
    try {
      // Fechar t√∫nel existente
      await this.stopTunnel();
      
      // Aguardar um pouco antes de reiniciar
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Iniciar novo t√∫nel
      return await this.startTunnel(port);
    } catch (error) {
      console.error('‚ùå Erro ao reiniciar t√∫nel ngrok:', error.message);
      this.url = null;
      throw error;
    }
  }

  async checkTunnel() {
    if (!this.url) return false;
    
    try {
      // Testar se o t√∫nel ainda est√° ativo fazendo uma requisi√ß√£o
      const axios = require('axios');
      await axios.get(`${this.url}/health`, { timeout: 5000 });
      return true;
    } catch (error) {
      console.log('‚ö†Ô∏è T√∫nel ngrok n√£o responde, marcando como inativo');
      this.url = null;
      return false;
    }
  }

  getWebhookUrl() {
    return this.url ? `${this.url}/webhook` : null;
  }

  isActive() {
    return !!this.url;
  }
}

module.exports = new NgrokService();